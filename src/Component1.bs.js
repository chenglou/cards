// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDOMRe = require("reason-react/src/ReactDOMRe.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");

var p1InitialCoords = /* record */[
  /* x */200,
  /* y */200
];

var p2InitialCoords = /* record */[
  /* x */450,
  /* y */300
];

var p1Bg = "./bg1.png";

var p2Bg = "./bg2.jpg";

function allTogglesOn(state) {
  if (state[/* glow */4] && state[/* ambientOcclusion */5] && state[/* blur */6] && state[/* grow */7] && state[/* lightSource */8] && state[/* overlapCrossfade */9]) {
    return state[/* transition */10];
  } else {
    return false;
  }
}

function updateAllToggles(state, value) {
  return /* record */[
          /* currentDrag */state[/* currentDrag */0],
          /* lastDrag */state[/* lastDrag */1],
          /* p1PermaOffset */state[/* p1PermaOffset */2],
          /* p2PermaOffset */state[/* p2PermaOffset */3],
          /* glow */value,
          /* ambientOcclusion */value,
          /* blur */value,
          /* grow */value,
          /* lightSource */value,
          /* overlapCrossfade */value,
          /* transition */value
        ];
}

function addCoords(param, param$1) {
  return /* record */[
          /* x */param[/* x */0] + param$1[/* x */0],
          /* y */param[/* y */1] + param$1[/* y */1]
        ];
}

function minusCoords(param, param$1) {
  return /* record */[
          /* x */param[/* x */0] - param$1[/* x */0],
          /* y */param[/* y */1] - param$1[/* y */1]
        ];
}

function divCoords(param, n) {
  return /* record */[
          /* x */param[/* x */0] / n,
          /* y */param[/* y */1] / n
        ];
}

var component = ReasonReact.reducerComponent("Page");

function make() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (self) {
              var cb = Curry._1(self[/* handle */0], (function ($$event, self) {
                      var x = $$event.screenX;
                      var y = $$event.screenY;
                      if (self[/* state */1][/* currentDrag */0] !== undefined) {
                        return Curry._1(self[/* send */3], /* Drag */Block.__(1, [/* record */[
                                        /* x */x,
                                        /* y */y
                                      ]]));
                      } else {
                        return 0;
                      }
                    }));
              window.addEventListener("mousemove", cb);
              return /* () */0;
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var state = self[/* state */1];
              var windowWidth = window.outerWidth;
              var windowHeight = window.outerHeight;
              var zoomLevel = Belt_Option.getExn(document.getElementById("measurer")).offsetWidth / window.innerWidth;
              var match = state[/* transition */10];
              var transitionTiming = match ? 0.2 : 0;
              var match$1 = state[/* lastDrag */1];
              var match$2 = match$1[0] ? /* tuple */[
                  1,
                  2
                ] : /* tuple */[
                  2,
                  1
                ];
              var p2Depth = match$2[1];
              var p1Depth = match$2[0];
              var match$3 = state[/* blur */6];
              var match$4 = state[/* lastDrag */1];
              var match$5 = match$3 ? (
                  match$4[0] ? /* tuple */[
                      0.5,
                      0
                    ] : /* tuple */[
                      0,
                      0.5
                    ]
                ) : /* tuple */[
                  0,
                  0
                ];
              var match$6 = state[/* grow */7];
              var match$7 = state[/* lastDrag */1];
              var match$8 = match$6 ? (
                  match$7[0] ? /* tuple */[
                      1,
                      1.12
                    ] : /* tuple */[
                      1.12,
                      1
                    ]
                ) : /* tuple */[
                  1,
                  1
                ];
              var p2Scale = match$8[1];
              var p1Scale = match$8[0];
              var match$9 = state[/* currentDrag */0];
              var match$10 = state[/* lastDrag */1];
              var draggingOffset = match$9 !== undefined ? minusCoords(match$9, match$10[1]) : /* record */[
                  /* x */0,
                  /* y */0
                ];
              var p1xy = addCoords(p1InitialCoords, state[/* p1PermaOffset */2]);
              var match$11 = state[/* lastDrag */1];
              var match$12 = match$11[0] ? divCoords(p1xy, zoomLevel) : divCoords(addCoords(p1xy, draggingOffset), zoomLevel);
              var p1y = match$12[/* y */1];
              var p1x = match$12[/* x */0];
              var p2xy = addCoords(p2InitialCoords, state[/* p2PermaOffset */3]);
              var match$13 = state[/* lastDrag */1];
              var match$14 = match$13[0] ? divCoords(addCoords(p2xy, draggingOffset), zoomLevel) : divCoords(p2xy, zoomLevel);
              var p2y = match$14[/* y */1];
              var p2x = match$14[/* x */0];
              var match$15 = state[/* lastDrag */1];
              var match$16;
              if (match$15[0]) {
                match$16 = /* tuple */[
                  0,
                  0,
                  3
                ];
              } else {
                var match$17 = state[/* lightSource */8];
                var match$18 = state[/* lightSource */8];
                match$16 = /* tuple */[
                  match$17 ? (windowWidth / 2 - p1x) * -40 / windowWidth : 0,
                  match$18 ? (windowHeight / 2 - p1y - 1000) * -40 / windowHeight : 0,
                  30
                ];
              }
              var p1ShadowY = match$16[1];
              var p1ShadowX = match$16[0];
              var match$19 = state[/* lastDrag */1];
              var match$20;
              if (match$19[0]) {
                var match$21 = state[/* lightSource */8];
                var match$22 = state[/* lightSource */8];
                match$20 = /* tuple */[
                  match$21 ? (windowWidth / 2 - p2x) * -40 / windowWidth : 0,
                  match$22 ? (windowHeight / 2 - p2y - 1000) * -40 / windowHeight : 0,
                  30
                ];
              } else {
                match$20 = /* tuple */[
                  0,
                  0,
                  3
                ];
              }
              var p2ShadowY = match$20[1];
              var p2ShadowX = match$20[0];
              var match$23 = state[/* lastDrag */1];
              var p1Dragged = match$23[0] ? false : true;
              var match$24 = state[/* lastDrag */1];
              var p2Dragged = match$24[0] ? true : false;
              var p1NudgeXDueToScale = (p1Scale - 1) / 2 * 400;
              var p1NudgeYDueToScale = (p1Scale - 1) / 2 * 300;
              var p2NudgeXDueToScale = (p2Scale - 1) / 2 * 200;
              var p2NudgeYDueToScale = (p2Scale - 1) / 2 * 350;
              var p2LocalToGlobalLeft = p2x - p2NudgeXDueToScale;
              var p1LocalToGlobalLeft = p1x - p1NudgeXDueToScale;
              var leftDelta = p1LocalToGlobalLeft - p2LocalToGlobalLeft;
              var p2LocalToGlobalRight = p2x - p2NudgeXDueToScale + 200 * p2Scale;
              var p1LocalToGlobalRight = p1x - p1NudgeXDueToScale + 400 * p1Scale;
              var rightDelta = p2LocalToGlobalRight - p1LocalToGlobalRight;
              var p2LocalToGlobalBottom = p2y - p2NudgeYDueToScale + 350 * p2Scale;
              var p1LocalToGlobalBottom = p1y - p1NudgeYDueToScale + 300 * p1Scale;
              var bottomDelta = p2LocalToGlobalBottom - p1LocalToGlobalBottom;
              var p2LocalToGlobalTop = p2y - p2NudgeYDueToScale;
              var p1LocalToGlobalTop = p1y - p1NudgeYDueToScale;
              var topDelta = p1LocalToGlobalTop - p2LocalToGlobalTop;
              var p1ProjectedShadowToP2Top = -topDelta - p1NudgeYDueToScale;
              var p1ProjectedShadowToP2Right = -rightDelta - p1NudgeXDueToScale;
              var p1ProjectedShadowToP2Bottom = -bottomDelta - p1NudgeYDueToScale;
              var p1ProjectedShadowToP2Left = -leftDelta - p1NudgeXDueToScale;
              var p1LocalToGlobalLeft$1 = p1x - p1NudgeXDueToScale;
              var p2LocalToGlobalLeft$1 = p2x - p2NudgeXDueToScale;
              var leftDelta$1 = p2LocalToGlobalLeft$1 - p1LocalToGlobalLeft$1;
              var p1LocalToGlobalRight$1 = p1x - p1NudgeXDueToScale + 400 * p1Scale;
              var p2LocalToGlobalRight$1 = p2x - p2NudgeXDueToScale + 200 * p2Scale;
              var rightDelta$1 = p1LocalToGlobalRight$1 - p2LocalToGlobalRight$1;
              var p1LocalToGlobalBottom$1 = p1y - p1NudgeYDueToScale + 300 * p1Scale;
              var p2LocalToGlobalBottom$1 = p2y - p2NudgeYDueToScale + 350 * p2Scale;
              var bottomDelta$1 = p1LocalToGlobalBottom$1 - p2LocalToGlobalBottom$1;
              var p1LocalToGlobalTop$1 = p1y - p1NudgeYDueToScale;
              var p2LocalToGlobalTop$1 = p2y - p2NudgeYDueToScale;
              var topDelta$1 = p2LocalToGlobalTop$1 - p1LocalToGlobalTop$1;
              var p2ProjectedShadowToP1Top = -topDelta$1 - p2NudgeYDueToScale;
              var p2ProjectedShadowToP1Right = -rightDelta$1 - p2NudgeXDueToScale;
              var p2ProjectedShadowToP1Bottom = -bottomDelta$1 - p2NudgeYDueToScale;
              var p2ProjectedShadowToP1Left = -leftDelta$1 - p2NudgeXDueToScale;
              var p1Outer = {
                left: "0px",
                position: "absolute",
                top: "0px",
                zIndex: String(p1Depth),
                transform: "translate(" + (String(p1x) + ("px, " + (String(p1y) + "px)")))
              };
              var p2Outer = {
                left: "0px",
                position: "absolute",
                top: "0px",
                zIndex: String(p2Depth),
                transform: "translate(" + (String(p2x) + ("px, " + (String(p2y) + "px)")))
              };
              var match$25 = p1Dragged && state[/* overlapCrossfade */9];
              var p1Overlay = {
                left: "0px",
                position: "absolute",
                top: "0px",
                zIndex: String(p1Depth + 10 | 0),
                opacity: match$25 ? "1" : "0",
                transition: "opacity " + (String(transitionTiming) + "s"),
                transform: "translate(" + (String(p1x) + ("px, " + (String(p1y) + "px)")))
              };
              var match$26 = p2Dragged && state[/* overlapCrossfade */9];
              var p2Overlay = {
                left: "0px",
                position: "absolute",
                top: "0px",
                zIndex: String(p2Depth + 10 | 0),
                opacity: match$26 ? "1" : "0",
                transition: "opacity " + (String(transitionTiming) + "s"),
                transform: "translate(" + (String(p2x) + ("px, " + (String(p2y) + "px)")))
              };
              var match$27 = p1Dragged && state[/* currentDrag */0] === undefined;
              var p1Inner = {
                backgroundColor: "black",
                backgroundImage: "url(" + (String(p1Bg) + ")"),
                cursor: match$27 ? "-webkit-grab" : "-webkit-grabbing",
                height: "" + (String(300) + "px"),
                position: "absolute",
                width: "" + (String(400) + "px"),
                backgroundSize: "cover",
                borderRadius: "8px",
                transition: "all " + (String(transitionTiming) + "s"),
                transform: "scale(" + (String(p1Scale) + ")"),
                filter: "blur(" + (String(match$5[0]) + "px)")
              };
              var match$28 = p2Dragged && state[/* currentDrag */0] === undefined;
              var p2Inner = {
                backgroundColor: "black",
                backgroundImage: "url(" + (String(p2Bg) + ")"),
                cursor: match$28 ? "-webkit-grab" : "-webkit-grabbing",
                height: "" + (String(350) + "px"),
                position: "absolute",
                width: "" + (String(200) + "px"),
                backgroundSize: "cover",
                borderRadius: "8px",
                transition: "all " + (String(transitionTiming) + "s"),
                transform: "scale(" + (String(p2Scale) + ")"),
                filter: "blur(" + (String(match$5[1]) + "px)")
              };
              var p1ClipPath = "inset(" + (String(p1ProjectedShadowToP2Top) + ("px " + (String(p1ProjectedShadowToP2Right) + ("px " + (String(p1ProjectedShadowToP2Bottom) + ("px " + (String(p1ProjectedShadowToP2Left) + "px round 8px)")))))));
              var match$29 = p1Dragged && state[/* transition */10];
              var p1ProjectedShadowOnP2 = ReactDOMRe.Style[/* unsafeAddProp */1]({
                    background: "black",
                    height: "" + (String(300) + "px"),
                    position: "absolute",
                    width: "" + (String(400) + "px"),
                    opacity: p1Dragged ? "1" : "0",
                    borderRadius: "8px",
                    boxShadow: "" + (String(p1ShadowX) + ("px " + (String(p1ShadowY) + "px 100px black"))),
                    clipPath: p1ClipPath,
                    transition: match$29 ? "opacity 0.45s" : "none"
                  }, "webkitClipPath", p1ClipPath);
              var p2ClipPath = "inset(" + (String(p2ProjectedShadowToP1Top) + ("px " + (String(p2ProjectedShadowToP1Right) + ("px " + (String(p2ProjectedShadowToP1Bottom) + ("px " + (String(p2ProjectedShadowToP1Left) + "px round 8px)")))))));
              var match$30 = p2Dragged && state[/* transition */10];
              var p2ProjectedShadowOnP1 = ReactDOMRe.Style[/* unsafeAddProp */1]({
                    background: "black",
                    height: "" + (String(350) + "px"),
                    position: "absolute",
                    width: "" + (String(200) + "px"),
                    opacity: p2Dragged ? "1" : "0",
                    borderRadius: "8px",
                    boxShadow: "" + (String(p2ShadowX) + ("px " + (String(p2ShadowY) + "px 100px black"))),
                    clipPath: p2ClipPath,
                    transition: match$30 ? "opacity 0.45s" : "none"
                  }, "webkitClipPath", p2ClipPath);
              var p1Glow = {
                backgroundImage: "url(" + (String(p1Bg) + ")"),
                height: "" + (String(300) + "px"),
                position: "absolute",
                width: "" + (String(400) + "px"),
                backgroundSize: "cover",
                borderRadius: "8px",
                transition: "all " + (String(transitionTiming) + "s"),
                transform: "translate(" + (String(p1ShadowX) + ("px, " + (String(p1ShadowY) + "px)"))),
                filter: "blur(" + (String(match$16[2]) + "px) brightness(80%) saturate(200%)")
              };
              var p2Glow = {
                backgroundImage: "url(" + (String(p2Bg) + ")"),
                height: "" + (String(350) + "px"),
                position: "absolute",
                width: "" + (String(200) + "px"),
                backgroundSize: "cover",
                borderRadius: "8px",
                transition: "all " + (String(transitionTiming) + "s"),
                transform: "translate(" + (String(p2ShadowX) + ("px, " + (String(p2ShadowY) + "px)"))),
                filter: "blur(" + (String(match$20[2]) + "px) brightness(80%) saturate(200%)")
              };
              var makeToggle = function (stateValue, action, description) {
                return React.createElement("label", {
                            style: {
                              cursor: "pointer",
                              display: "flex",
                              userSelect: "none"
                            }
                          }, React.createElement("input", {
                                checked: stateValue,
                                type: "checkbox",
                                onChange: (function () {
                                    return Curry._1(self[/* send */3], action);
                                  })
                              }), description);
              };
              var match$31 = state[/* ambientOcclusion */5];
              var match$32 = state[/* glow */4];
              var match$33 = state[/* ambientOcclusion */5];
              var match$34 = state[/* glow */4];
              return React.createElement("div", undefined, React.createElement("div", {
                              style: {
                                fontFamily: "-apple-system, BlinkMacSystemFont, sans-serif"
                              }
                            }, React.createElement("div", undefined, "Only works on desktop for now"), React.createElement("p", undefined), makeToggle(state[/* glow */4], /* ToggleGlow */1, "Back glow (self shadow)"), makeToggle(state[/* ambientOcclusion */5], /* ToggleAmbientOcclusion */2, "Ambient occlusion (projected shadow)"), makeToggle(state[/* blur */6], /* ToggleBlur */3, "Blur (far away item)"), makeToggle(state[/* grow */7], /* ToggleGrow */4, "Grow"), makeToggle(state[/* lightSource */8], /* ToggleLightSource */5, "Light source (shadow position)"), makeToggle(state[/* overlapCrossfade */9], /* ToggleOverlapCrossfade */6, "Overlap crossfade"), makeToggle(state[/* transition */10], /* ToggleTransition */7, "Transition"), React.createElement("p", undefined), makeToggle(allTogglesOn(state), /* ToggleAll */8, "2030")), React.createElement("div", {
                              style: p1Outer
                            }, match$31 ? React.createElement("div", {
                                    style: p1ProjectedShadowOnP2
                                  }) : null, match$32 ? React.createElement("div", {
                                    style: p1Glow
                                  }) : null, React.createElement("div", {
                                  style: p1Inner
                                })), React.createElement("div", {
                              style: p2Outer
                            }, match$33 ? React.createElement("div", {
                                    style: p2ProjectedShadowOnP1
                                  }) : null, match$34 ? React.createElement("div", {
                                    style: p2Glow
                                  }) : null, React.createElement("div", {
                                  style: p2Inner
                                })), React.createElement("div", {
                              style: p1Overlay,
                              onMouseDown: (function (e) {
                                  var x = e.screenX;
                                  var y = e.screenY;
                                  return Curry._1(self[/* send */3], /* Down */Block.__(0, [
                                                /* One */0,
                                                /* record */[
                                                  /* x */x,
                                                  /* y */y
                                                ]
                                              ]));
                                }),
                              onMouseUp: (function () {
                                  return Curry._1(self[/* send */3], /* Up */0);
                                })
                            }, React.createElement("div", {
                                  style: p1Inner
                                })), React.createElement("div", {
                              style: p2Overlay,
                              onMouseDown: (function (e) {
                                  var x = e.screenX;
                                  var y = e.screenY;
                                  return Curry._1(self[/* send */3], /* Down */Block.__(0, [
                                                /* Two */1,
                                                /* record */[
                                                  /* x */x,
                                                  /* y */y
                                                ]
                                              ]));
                                }),
                              onMouseUp: (function () {
                                  return Curry._1(self[/* send */3], /* Up */0);
                                })
                            }, React.createElement("div", {
                                  style: p2Inner
                                })));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* currentDrag */undefined,
                      /* lastDrag : tuple */[
                        /* Two */1,
                        /* record */[
                          /* x */0,
                          /* y */0
                        ]
                      ],
                      /* p1PermaOffset : record */[
                        /* x */0,
                        /* y */0
                      ],
                      /* p2PermaOffset : record */[
                        /* x */0,
                        /* y */0
                      ],
                      /* glow */true,
                      /* ambientOcclusion */true,
                      /* blur */true,
                      /* grow */true,
                      /* lightSource */true,
                      /* overlapCrossfade */true,
                      /* transition */true
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              if (typeof action === "number") {
                switch (action) {
                  case 0 : 
                      var match = state[/* currentDrag */0];
                      var match$1 = state[/* lastDrag */1];
                      if (match !== undefined) {
                        var pane = match$1[0];
                        var a = match;
                        var offset = minusCoords(a, match$1[1]);
                        if (pane) {
                          return /* Update */Block.__(0, [/* record */[
                                      /* currentDrag */undefined,
                                      /* lastDrag : tuple */[
                                        pane,
                                        a
                                      ],
                                      /* p1PermaOffset */state[/* p1PermaOffset */2],
                                      /* p2PermaOffset */addCoords(offset, state[/* p2PermaOffset */3]),
                                      /* glow */state[/* glow */4],
                                      /* ambientOcclusion */state[/* ambientOcclusion */5],
                                      /* blur */state[/* blur */6],
                                      /* grow */state[/* grow */7],
                                      /* lightSource */state[/* lightSource */8],
                                      /* overlapCrossfade */state[/* overlapCrossfade */9],
                                      /* transition */state[/* transition */10]
                                    ]]);
                        } else {
                          return /* Update */Block.__(0, [/* record */[
                                      /* currentDrag */undefined,
                                      /* lastDrag : tuple */[
                                        pane,
                                        a
                                      ],
                                      /* p1PermaOffset */addCoords(offset, state[/* p1PermaOffset */2]),
                                      /* p2PermaOffset */state[/* p2PermaOffset */3],
                                      /* glow */state[/* glow */4],
                                      /* ambientOcclusion */state[/* ambientOcclusion */5],
                                      /* blur */state[/* blur */6],
                                      /* grow */state[/* grow */7],
                                      /* lightSource */state[/* lightSource */8],
                                      /* overlapCrossfade */state[/* overlapCrossfade */9],
                                      /* transition */state[/* transition */10]
                                    ]]);
                        }
                      } else {
                        return /* NoUpdate */0;
                      }
                  case 1 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* currentDrag */state[/* currentDrag */0],
                                  /* lastDrag */state[/* lastDrag */1],
                                  /* p1PermaOffset */state[/* p1PermaOffset */2],
                                  /* p2PermaOffset */state[/* p2PermaOffset */3],
                                  /* glow */!state[/* glow */4],
                                  /* ambientOcclusion */state[/* ambientOcclusion */5],
                                  /* blur */state[/* blur */6],
                                  /* grow */state[/* grow */7],
                                  /* lightSource */state[/* lightSource */8],
                                  /* overlapCrossfade */state[/* overlapCrossfade */9],
                                  /* transition */state[/* transition */10]
                                ]]);
                  case 2 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* currentDrag */state[/* currentDrag */0],
                                  /* lastDrag */state[/* lastDrag */1],
                                  /* p1PermaOffset */state[/* p1PermaOffset */2],
                                  /* p2PermaOffset */state[/* p2PermaOffset */3],
                                  /* glow */state[/* glow */4],
                                  /* ambientOcclusion */!state[/* ambientOcclusion */5],
                                  /* blur */state[/* blur */6],
                                  /* grow */state[/* grow */7],
                                  /* lightSource */state[/* lightSource */8],
                                  /* overlapCrossfade */state[/* overlapCrossfade */9],
                                  /* transition */state[/* transition */10]
                                ]]);
                  case 3 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* currentDrag */state[/* currentDrag */0],
                                  /* lastDrag */state[/* lastDrag */1],
                                  /* p1PermaOffset */state[/* p1PermaOffset */2],
                                  /* p2PermaOffset */state[/* p2PermaOffset */3],
                                  /* glow */state[/* glow */4],
                                  /* ambientOcclusion */state[/* ambientOcclusion */5],
                                  /* blur */!state[/* blur */6],
                                  /* grow */state[/* grow */7],
                                  /* lightSource */state[/* lightSource */8],
                                  /* overlapCrossfade */state[/* overlapCrossfade */9],
                                  /* transition */state[/* transition */10]
                                ]]);
                  case 4 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* currentDrag */state[/* currentDrag */0],
                                  /* lastDrag */state[/* lastDrag */1],
                                  /* p1PermaOffset */state[/* p1PermaOffset */2],
                                  /* p2PermaOffset */state[/* p2PermaOffset */3],
                                  /* glow */state[/* glow */4],
                                  /* ambientOcclusion */state[/* ambientOcclusion */5],
                                  /* blur */state[/* blur */6],
                                  /* grow */!state[/* grow */7],
                                  /* lightSource */state[/* lightSource */8],
                                  /* overlapCrossfade */state[/* overlapCrossfade */9],
                                  /* transition */state[/* transition */10]
                                ]]);
                  case 5 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* currentDrag */state[/* currentDrag */0],
                                  /* lastDrag */state[/* lastDrag */1],
                                  /* p1PermaOffset */state[/* p1PermaOffset */2],
                                  /* p2PermaOffset */state[/* p2PermaOffset */3],
                                  /* glow */state[/* glow */4],
                                  /* ambientOcclusion */state[/* ambientOcclusion */5],
                                  /* blur */state[/* blur */6],
                                  /* grow */state[/* grow */7],
                                  /* lightSource */!state[/* lightSource */8],
                                  /* overlapCrossfade */state[/* overlapCrossfade */9],
                                  /* transition */state[/* transition */10]
                                ]]);
                  case 6 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* currentDrag */state[/* currentDrag */0],
                                  /* lastDrag */state[/* lastDrag */1],
                                  /* p1PermaOffset */state[/* p1PermaOffset */2],
                                  /* p2PermaOffset */state[/* p2PermaOffset */3],
                                  /* glow */state[/* glow */4],
                                  /* ambientOcclusion */state[/* ambientOcclusion */5],
                                  /* blur */state[/* blur */6],
                                  /* grow */state[/* grow */7],
                                  /* lightSource */state[/* lightSource */8],
                                  /* overlapCrossfade */!state[/* overlapCrossfade */9],
                                  /* transition */state[/* transition */10]
                                ]]);
                  case 7 : 
                      return /* Update */Block.__(0, [/* record */[
                                  /* currentDrag */state[/* currentDrag */0],
                                  /* lastDrag */state[/* lastDrag */1],
                                  /* p1PermaOffset */state[/* p1PermaOffset */2],
                                  /* p2PermaOffset */state[/* p2PermaOffset */3],
                                  /* glow */state[/* glow */4],
                                  /* ambientOcclusion */state[/* ambientOcclusion */5],
                                  /* blur */state[/* blur */6],
                                  /* grow */state[/* grow */7],
                                  /* lightSource */state[/* lightSource */8],
                                  /* overlapCrossfade */state[/* overlapCrossfade */9],
                                  /* transition */!state[/* transition */10]
                                ]]);
                  case 8 : 
                      if (allTogglesOn(state)) {
                        return /* Update */Block.__(0, [updateAllToggles(state, false)]);
                      } else {
                        return /* Update */Block.__(0, [updateAllToggles(state, true)]);
                      }
                  
                }
              } else if (action.tag) {
                return /* Update */Block.__(0, [/* record */[
                            /* currentDrag */action[0],
                            /* lastDrag */state[/* lastDrag */1],
                            /* p1PermaOffset */state[/* p1PermaOffset */2],
                            /* p2PermaOffset */state[/* p2PermaOffset */3],
                            /* glow */state[/* glow */4],
                            /* ambientOcclusion */state[/* ambientOcclusion */5],
                            /* blur */state[/* blur */6],
                            /* grow */state[/* grow */7],
                            /* lightSource */state[/* lightSource */8],
                            /* overlapCrossfade */state[/* overlapCrossfade */9],
                            /* transition */state[/* transition */10]
                          ]]);
              } else {
                var coords = action[1];
                return /* Update */Block.__(0, [/* record */[
                            /* currentDrag */coords,
                            /* lastDrag : tuple */[
                              action[0],
                              coords
                            ],
                            /* p1PermaOffset */state[/* p1PermaOffset */2],
                            /* p2PermaOffset */state[/* p2PermaOffset */3],
                            /* glow */state[/* glow */4],
                            /* ambientOcclusion */state[/* ambientOcclusion */5],
                            /* blur */state[/* blur */6],
                            /* grow */state[/* grow */7],
                            /* lightSource */state[/* lightSource */8],
                            /* overlapCrossfade */state[/* overlapCrossfade */9],
                            /* transition */state[/* transition */10]
                          ]]);
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var p1Width = 400;

var p1Height = 300;

var p2Width = 200;

var p2Height = 350;

exports.p1InitialCoords = p1InitialCoords;
exports.p2InitialCoords = p2InitialCoords;
exports.p1Width = p1Width;
exports.p1Height = p1Height;
exports.p2Width = p2Width;
exports.p2Height = p2Height;
exports.p1Bg = p1Bg;
exports.p2Bg = p2Bg;
exports.allTogglesOn = allTogglesOn;
exports.updateAllToggles = updateAllToggles;
exports.addCoords = addCoords;
exports.minusCoords = minusCoords;
exports.divCoords = divCoords;
exports.component = component;
exports.make = make;
/* component Not a pure module */
